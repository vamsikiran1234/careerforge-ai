// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model - Core user information
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String   // Add password field for authentication
  role      String   @default("STUDENT") // STUDENT, MENTOR, ADMIN
  avatar    String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  mentor           Mentor?
  careerSessions   CareerSession[]
  quizSessions     QuizSession[]
  studentQuestions StudentQuestion[]

  @@map("users")
}

// Mentor model - Extended mentor information
model Mentor {
  id            String  @id @default(cuid())
  userId        String  @unique
  expertiseTags String? // JSON string for expertise domains array
  experience    Int     @default(0) // Years of experience
  hourlyRate    Float?
  availability  String? // JSON string for availability schedule
  rating        Float?  @default(0.0)
  totalSessions Int     @default(0)
  isVerified    Boolean @default(false)
  linkedinUrl   String?
  portfolioUrl  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mentors")
}

// CareerSession model - Chat sessions with AI career mentor
model CareerSession {
  id        String    @id @default(cuid())
  userId    String
  title     String?   @default("Career Chat Session")
  messages  String    @default("[]") // JSON string of message objects
  summary   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  endedAt   DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("career_sessions")
}

// QuizSession model - Skill assessment and career planning sessions
model QuizSession {
  id           String    @id @default(cuid())
  userId       String
  currentStage String    @default("SKILLS_ASSESSMENT") // SKILLS_ASSESSMENT, CAREER_INTERESTS, etc.
  answers      String    @default("{}") // JSON string storing answers by stage
  results      String?   // JSON string for final career recommendations and analysis
  score        Float?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizQuestions QuizQuestion[]

  @@map("quiz_sessions")
}

// QuizQuestion model - Individual questions within quiz sessions
model QuizQuestion {
  id            String   @id @default(cuid())
  quizSessionId String
  questionText  String
  options       String   @default("[]") // JSON string of option objects
  correctAnswer String?
  userAnswer    String?
  stage         String   // Stage this question belongs to
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  quizSession QuizSession @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)

  @@map("quiz_questions")
}

// StudentQuestion model - Questions submitted for mentor matching
model StudentQuestion {
  id        String   @id @default(cuid())
  userId    String
  question  String
  domain    String   @default("OTHER") // WEB_DEVELOPMENT, DATA_SCIENCE, etc.
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_questions")
}
