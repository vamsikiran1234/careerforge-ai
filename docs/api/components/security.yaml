# Security Scheme Definitions

# API Key Authentication
ApiKeyAuth:
  type: apiKey
  in: header
  name: X-API-Key
  description: |
    API Key authentication using a secret key passed in the request header.
    
    **Usage:**
    ```
    X-API-Key: your_api_key_here
    ```
    
    **Rate Limits:** API keys have specific rate limits based on the subscription tier.

# Bearer Token Authentication (JWT)
BearerAuth:
  type: http
  scheme: bearer
  bearerFormat: JWT
  description: |
    JWT Bearer token authentication for user sessions.
    
    **Usage:**
    ```
    Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    ```
    
    **Token Expiration:** Tokens expire after 24 hours and need to be refreshed.
    
    **Refresh Process:** Use the `/auth/refresh` endpoint with a valid refresh token.

# OAuth 2.0 Authentication
OAuth2:
  type: oauth2
  description: |
    OAuth 2.0 authentication for third-party integrations and enhanced security.
    
    **Supported Flows:**
    - Authorization Code Flow (recommended for web apps)
    - Client Credentials Flow (for server-to-server)
    
    **Scopes:**
    - `read`: Read access to user data
    - `write`: Write access to user data
    - `admin`: Administrative access
  flows:
    authorizationCode:
      authorizationUrl: https://auth.careerforge.ai/oauth/authorize
      tokenUrl: https://auth.careerforge.ai/oauth/token
      refreshUrl: https://auth.careerforge.ai/oauth/refresh
      scopes:
        read: Read access to user data
        write: Write access to user data
        admin: Administrative access
    clientCredentials:
      tokenUrl: https://auth.careerforge.ai/oauth/token
      scopes:
        read: Read access to user data
        write: Write access to user data

# Basic Authentication (for legacy support)
BasicAuth:
  type: http
  scheme: basic
  description: |
    Basic HTTP authentication using username and password.
    
    **Usage:**
    ```
    Authorization: Basic base64(username:password)
    ```
    
    **Note:** This method is less secure and should only be used for testing or legacy integrations.

# Session-based Authentication
SessionAuth:
  type: apiKey
  in: cookie
  name: session_id
  description: |
    Session-based authentication using HTTP cookies.
    
    **Usage:**
    Automatically handled by the browser after successful login.
    
    **Session Duration:** Sessions expire after 30 days of inactivity.
    
    **Security Features:**
    - HttpOnly cookies to prevent XSS attacks
    - Secure flag for HTTPS-only transmission
    - SameSite attribute for CSRF protection

# Multi-factor Authentication
MfaAuth:
  type: apiKey
  in: header
  name: X-MFA-Token
  description: |
    Multi-factor authentication token for enhanced security operations.
    
    **Usage:**
    ```
    X-MFA-Token: 123456
    ```
    
    **When Required:**
    - Account deletion
    - Sensitive data access
    - Admin operations
    
    **Token Types:**
    - TOTP (Time-based One-Time Password)
    - SMS verification codes
    - Email verification codes

# Service-to-Service Authentication
ServiceAuth:
  type: http
  scheme: bearer
  bearerFormat: service_token
  description: |
    Service-to-service authentication for internal API calls.
    
    **Usage:**
    ```
    Authorization: Bearer service_token_here
    ```
    
    **Features:**
    - Long-lived tokens (90 days)
    - Service-specific permissions
    - Enhanced rate limits
    - Audit logging
