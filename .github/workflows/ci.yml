name: 🚀 CareerForge AI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: careerforge_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install backend dependencies
      run: npm ci
    
    - name: 🗄️ Setup database
      run: |
        npx prisma generate
        npx prisma db push
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/careerforge_test
    
    - name: 🧪 Run backend tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/careerforge_test
        JWT_SECRET: test-secret-key-for-ci
        NODE_ENV: test

  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: 📦 Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: 🔍 TypeScript check
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: http://localhost:3000/api/v1
    
    - name: 🎨 Lint check
      run: |
        cd frontend
        npm run lint

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: 🔍 Backend security audit
      run: npm audit --audit-level moderate
    
    - name: 🔍 Frontend security audit
      run: |
        cd frontend
        npm audit --audit-level moderate

  build-docker:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Build Docker image
      run: docker build -t careerforge-ai:test .
    
    - name: 🧪 Test Docker container
      run: |
        docker run -d --name test-container -p 3000:3000 \
          -e NODE_ENV=production \
          -e JWT_SECRET=test-secret \
          -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
          careerforge-ai:test
        sleep 10
        docker logs test-container
        docker stop test-container

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-audit, build-docker]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to staging
      run: echo "Deploy to staging environment"
      # Add your staging deployment commands here

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-audit, build-docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🌟 Deploy to production
      run: echo "Deploy to production environment"
      # Add your production deployment commands here